/* -*- Mode: C; c-basic-offset: 4 -*-
 *
 */
%%
headers
#include "pygobject.h"
#include <gtk/gtk.h>
#include <panel/xfce-panel-external-plugin.h>

extern PyTypeObject PyGtkWidget_Type;

int command_line_args_helper(char*** argv)
{
  int argc;
  int i;
  PyObject* av;

  av = PySys_GetObject("argv");
  if (!PyList_Check(av)) {
    PyErr_Warn(PyExc_Warning, "ignoring sys.argv: it must be a list of strings");
    av = NULL; 
  }

  if (av != NULL) {
    argc = PyList_Size(av);
    for (i = 0; i < argc; i++) {
      if (!PyString_Check(PyList_GetItem(av, i))) {
        PyErr_Warn(PyExc_Warning, "ignoring sys.argv: it must be a list of strings");
        av = NULL;
        break;
      }
    }
  }

  if (av) {
    *argv = g_new(char *, argc + 1);
    for (i = 0; i < argc; i++) {
      (*argv)[i] = g_strdup(PyString_AsString(PyList_GetItem(av, i)));
    }

    (*argv)[i] = 0;
  }

  return argc;
}

static void call_helper(XfcePanelPlugin* plugin, char const* fn)
{
  PyObject* py;
  PyGILState_STATE state;
  PyObject* retobj;
  PyObject* py_method;

  state = pyg_gil_state_ensure();

  py = pygobject_new((GObject*) plugin);

  py_method = PyObject_GetAttrString(py, (char*) fn);
  if (!py_method) {
    if (PyErr_Occurred())
      PyErr_Print();
  } else {
    retobj = PyEval_CallObject(py_method, NULL); 
    Py_DECREF(py_method);

    if (retobj) {
      Py_DECREF(retobj);
    }
  }
  Py_DECREF(py);

  pyg_gil_state_release(state);
}

static void plugin_construct (XfcePanelPlugin *plugin)
{
  /* questionable */
  call_helper(plugin, "do_construct");
}

static void plugin_free_data (XfcePanelPlugin *plugin)
{
  /* questionable */
  call_helper(plugin, "do_free_data");
}

static void plugin_save (XfcePanelPlugin *plugin)
{
  call_helper(plugin, "do_save");
}

static void plugin_configure (XfcePanelPlugin *plugin)
{
  call_helper(plugin, "do_configure");
}

static void plugin_about (XfcePanelPlugin *plugin)
{
  call_helper(plugin, "do_about");
}

static void plugin_set_size (XfcePanelPlugin *plugin, int size)
{
  PyObject* py;
  PyGILState_STATE state;
  PyObject* retobj;
  PyObject* py_method;
  PyObject* py_args;

  state = pyg_gil_state_ensure();

  py = pygobject_new((GObject*) plugin);

  py_method = PyObject_GetAttrString(py, "do_set_size");
  if (!py_method) {
    if (PyErr_Occurred())
      PyErr_Print();
  } else {
    py_args = PyTuple_New(1);
    PyTuple_SET_ITEM(py_args, 0, PyInt_FromLong(size));

    retobj = PyEval_CallObject(py_method, py_args);

    Py_DECREF(py_args);
    Py_DECREF(py_args);
    Py_DECREF(py_method);

    if (retobj) {
      Py_DECREF(retobj);
    }
  }
  Py_DECREF(py);

  pyg_gil_state_release(state);
}

/* values may be NULL, except api_version */
static XfcePanelPluginInfo info = {
   XFCE_PANEL_PLUGIN_API_VERSION,  /* from header file */
   plugin_construct, /* create widget content (plugin is a GtkContainer) */
   plugin_free_data, /* free allocated data */
   plugin_save,      /* save configuration */
   plugin_configure, /* run configuration dialog */
   plugin_about,     /* show about dialog */
   plugin_set_size   /* adjust to new panel size */
};

%%
include
%%
modulename external
%%
import gobject.GObject as PyGObject_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Plug as PyGtkPlug_Type
%%
ignore
%%
ignore-glob
  *_get_type
%%
ignore-win32
%%
override xfce_external_panel_plugin_new kwargs
static int
_wrap_xfce_external_panel_plugin_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    char** argv;
    int argc;

    argv = NULL;
    argc = command_line_args_helper(&argv);
    self->obj = (GObject *)xfce_external_panel_plugin_new (argc, argv, &info);

    pygobject_register_wrapper((PyObject *)self);

    return 0;
}
