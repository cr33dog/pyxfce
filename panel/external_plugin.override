/* -*- Mode: C; c-basic-offset: 4 -*-
 *
 */
%%
headers
#include "pygobject.h"
#include <gtk/gtk.h>
#include <panel/xfce-panel-external-plugin.h>

extern PyTypeObject PyGtkWidget_Type;

static void plugin_construct (XfcePanelPlugin *plugin)
{
  PyObject* py;
  PyGILState_STATE state;

  state = pyg_gil_state_ensure();

  py = pygobject_new((GObject*) plugin);

  PyObject* retobj;

  PyObject* py_method;

  py_method = PyObject_GetAttrString(py, "do_connect_widget_destroyed");
  if (!py_method) {
    if (PyErr_Occurred())
      PyErr_Print();
  } else {
    retobj = PyEval_CallObject(py_method, NULL); 
    Py_DECREF(py_method);

    if (retobj) {
      Py_DECREF(retobj);
    }
  }

  pyg_gil_state_release(state);
}

static void plugin_free_data (XfcePanelPlugin *plugin)
{
}

static void plugin_save (XfcePanelPlugin *plugin)
{
}

static void plugin_configure (XfcePanelPlugin *plugin)
{
}

static void plugin_about (XfcePanelPlugin *plugin)
{
}

static void plugin_set_size (XfcePanelPlugin *plugin, int size)
{
}

/* values may be NULL, except api_version */
static XfcePanelPluginInfo info = {
   XFCE_PANEL_PLUGIN_API_VERSION,  /* from header file */
   plugin_construct, /* create widget content (plugin is a GtkContainer) */
   plugin_free_data, /* free allocated data */
   plugin_save,      /* save configuration */
   plugin_configure, /* run configuration dialog */
   plugin_about,     /* show about dialog */
   plugin_set_size   /* adjust to new panel size */
};

%%
include
%%
modulename external
%%
import gobject.GObject as PyGObject_Type
import gtk.Widget as PyGtkWidget_Type
import gtk.Plug as PyGtkPlug_Type
%%
ignore
%%
ignore-glob
  *_get_type
%%
ignore-win32
%%
override xfce_external_panel_plugin_new kwargs
static int
_wrap_xfce_external_panel_plugin_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
/*
    static char *kwlist[] = { "", NULL };

    if (!PyArg_ParseTupleAndKeywords(args,kwargs,
                                     "O!:XfceExternalPanelPlugin.__init__",
                                     kwlist, &PyGdkScreen_Type, &gscreen))
        return -1;
*/
    self->obj = (GObject *)xfce_external_panel_plugin_new (NULL, NULL, &info);

    pygobject_register_wrapper((PyObject *)self);

    return 0;
}
