/* -*- Mode: C; c-basic-offset: 4 -*-
 *
 */
%%
headers
#include "pygobject.h"
#include <gtk/gtk.h>
#include <libxfcegui4/libxfcegui4.h>

%%
include
%%
modulename exec
%%
import gobject.GObject as PyGObject_Type
import gtk.gdk.Screen as PyGdkScreen_Type
%%
ignore
%%
ignore-glob
  *_get_type
%%
ignore-win32
%%
override exec_argv_on_screen kwargs
static PyObject *
_wrap_xfce_exec_argv_on_screen(PyObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "screen", "args", "in_terminal", "use_startup_notification", NULL };
    PyGObject *screen;
    char *cmd;
    int in_terminal, use_sn, ret;
    GError *error = NULL;
    PyObject* args;
    char const** c_argv;
    int args_count;
    int i;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "O!O!ii:exec_argv_on_screen", kwlist, &PyGdkScreen_Type, &screen, &PyList_Type, &args, &in_terminal, &use_sn))
        return NULL;

    args_count = PyList_Size(args);
    c_argv = g_new0 (char const*, args_count + 1);

    for (i = 0; i < args_count; i++) {
        c_argv[i] = PyList_GetItem(args, i);
    }
    
    ret = xfce_exec_argv_on_screen(GDK_SCREEN(screen->obj), c_argv, in_terminal, use_sn, &error);
    if (pyg_error_check(&error)) {
        g_free(c_argv);
        return NULL;
    }

    g_free(c_args);

    return PyBool_FromLong(ret);
}

