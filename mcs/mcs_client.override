/* -*- Mode: C; c-basic-offset: 4 -*-
 *
 */
%%
headers
#include "pygobject.h"
#include <gtk/gtk.h>
#include <libxfce4mcs/mcs-client.h>

%%
include
%%
modulename client
%%
import gobject.GObject as PyGObject_Type
%%
ignore
%%
ignore-glob
%%
ignore-win32
%%
override xfce_mcs_client_get_setting kwargs
static PyObject *_wrap_xfce_mcs_client_get_setting(PyGObject *self, PyObject *args, PyObject *kwargs)
{
	static char *kwlist[] = { "name", "channel_name", NULL };
	char const *name;
	char const *channel_name;
	McsResult	res;
	McsSetting	*setting;

	/* TODO make a mcssetting have an identity */
	/* (to make it usable together with mcsmanager) */

	if (!PyArg_ParseTupleAndKeywords(args, kwargs, "ss:XfceAboutDialog.__init__", kwlist, 
		&name, &channel_name)
	)
		return NULL;

	res = mcs_client_get_setting (self->obj, name, channel_name, &setting);
	switch (setting->type) {
	MCS_TYPE_INT:
		return PyInt_FromLong(setting->data.v_int);
		break;
	MCS_TYPE_STRING:
		if (!setting->data.v_string) {
			Py_INCREF(Py_None);
			return Py_None;
		}

		return PyString_FromString(setting->data.v_string);
		break;
	MCS_TYPE_COLOR:
		return Py_BuildValue("(iii)", setting->data.v_color.red,
			setting->data.v_color.green,
			setting->data.v_color.blue);
		break;
	default:
		return NULL;
	}
	/* last_change_serial ? */

	Py_INCREF(Py_None);
	return Py_None;
}
